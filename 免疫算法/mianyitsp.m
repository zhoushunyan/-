%%%一个旅行商人要拜访全国31个省会城市，需要选择最短的路径%%%%
%种群数目NP=200
%免疫个体维数N=31
%迭代次数G=1000
%克隆个体个数为Ncl=10
%任意两个城市的距离矩阵D

%%%免疫算法解决TSP问题%%%%%%%
%%%初始化%%%%%%%
clear all; %清除所有变量
close all; %清图
clc ;      %清屏
%%全国31个省会城市的坐标
C1=[
1150.0 1760.0;... 
630.0 1660.0;...
40.0 2090.0;... 
750.0 1100.0;... 
750.0 2030.0;... 
1030.0 2070.0;... 
1650.0 650.0;... 
1490.0 1630.0;...
790.0 2260.0;... 
1710.0 1310.0;... 
840.0 550.0;... 
1170.0 2300.0;... 
970.0 1340.0;... 
510.0 700.0;... 
750.0 900.0;... 
1280.0 1200.0;... 
230.0 590.0;... 
460.0 860.0;... 
1040.0 950.0;... 
590.0 1390.0;... 
830.0 1770.0;... 
490.0 500.0;...
1840.0 1240.0;... 
1260.0 1500.0;... 
1280.0 790.0;... 
490.0 2130.0;... 
1460.0 1420.0;... 
1260.0 1910.0;... 
360.0 1980.0;... 
];%31个省会坐标
C=[
41 94;... 
37 84;...
54 67;...
25 62;...
7 64;...
2 99;...
68 58;...
71 44;...
54 62;...
83 69;...
64 60;...
18 54;...
22 60;...
83 46;...
91 38;...
25 38;...
24 42;...
58 69;...
71 71;...
74 78;...
87 76;...
18 40;...
13 40;...
82 7;...
62 32;...
58 35;...
45 21;...
41 26;...
44 35;...
4 50;...
];    
N=size(C,1); %TSP问题的规模，即城市数目
D=zeros(N);  %任意两个城市距离间隔矩阵,初始化都为0

 %任意两个城市距离间隔矩阵%
 for i=1:N
     for j=1:N
         D(i,j)=((C(i,1)-C(j,1))^2+(C(i,2)-C(j,2))^2)^0.5;
     end
 end  
 
 NP=200;  %免疫个体数目
 G=100; %最大免疫代数
 f=zeros(N,NP); %用于存储种群
 
  for i=1:NP
     f(:,i)=randperm(N); %随机生成初始种群
  end
  
  len=zeros(NP,1);  %存储路径长度
  for i=1:NP
    len(i)=func3(D,f(:,i),N); %随机生成初始种群
  end
  
  [Sortlen,Index]=sort(len);
  Sortf=f(:,Index);    %种群个体排序
  gen=100;               %免疫代数
  Nc1=10;             %克隆个数
  
  %%%%%%%%%%%%%%%%%%%%%%免疫循环%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  while gen<G
      %%%%%%%%%%%%%%%%%选激励度前NP/2个个体进行免疫操作%%%%%%%%%%%
      for i=1:NP/2
          
          a=Sortf(:,i);
          Ca=repmat(a,1,Nc1);
          for j=1:Nc1
              p1=floor(1+N*rand());%floor是向下取整
              p2=floor(1+N*rand());
              while p1==p2
              p1=floor(1+N*rand());
              p2=floor(1+N*rand());
              end
              %%元素的交换
              temp=Ca(p1,j);
              Ca(p1,j)=Ca(p2,j);
              Ca(p2,j)=temp;
          end
          Ca(:,1)=Sortf(:,i);   %保留克隆源个体
          %%%%%%%%%%%%%%%%克隆抑制，保留亲和度最高的个体%%%%%%%%%%%%%%%%
          for j=1:Nc1
              Calen(j)=func3(D,Ca(:,j),N);
          end
          [SortCalen,Index]=sort(Calen);
          SortCa=Ca(:,Index);
          af(:,i)=SortCa(:,1);
          alen(i)=SortCalen(1);
      end
      %%%%%%%%%%%%%%%%%种群刷新%%%%%%%%%%%
      for i=1:NP/2
          bf(:,i)=randperm(N); %随机生成初始种群
          blen(i)=func3(D,bf(:,i),N); %计算路径长度
      end
      %%%%%%%%%%%%%%%%%免疫种群与新种群合并%%%%%%%%%%%
      f=[af,bf];
      len=[alen,blen];
      [Sortlen,Index]=sort(len);
      Sortf=f(:,Index);
      gen=gen+1;
      trace(gen)=Sortlen(1);
  end
  
  %%%%%%%%%%%%%%%%%%%%%%输出优化结果%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  Bestf=Sortf(:,1);   %最优变量
  Bestlen=trace(end);  %最优值
  %%%%%图1
  figure 
  for i=1:N-1
     plot([C(Bestf(i),1),C(Bestf(i+1),1)],...
           [C(Bestf(i),2),C(Bestf(i+1),2)],'bo-');
     hold on;
  end
  
   plot([C(Bestf(N),1),C(Bestf(1),1)],...
         [C(Bestf(N),2),C(Bestf(1),2)],'ro-');
   title(['优化最短距离:',num2str(trace(end))]);
   %%%%图2
   figure 
   plot(trace)
   xlabel('迭代次数')
   ylabel('目标函数值')
   title('亲和度进化曲线')
